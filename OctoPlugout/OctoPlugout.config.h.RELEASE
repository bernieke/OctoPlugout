// COPY this file and name it "OctoPlugout.config.h" This ensures I never overwrite you config file when updating.
// Version information
#define OctoPlugout_config_version 3

//=========================================================================================================
// For sure set THESE defines for your printer / octoprint installation

#define ssid "WiFiName"         		// your network SSID (name)
#define password "WiFiPassword" 		// your network password
#define octoprint_apikey "D8F4....etc"	// The octoprint API key

// Set this define to use the IP address to connect to octoprint. I was unsuccessful with the "hostname" method
// So SET THIS DEFINE, and use the IP method for connecting, as I have not been able to connect using the "hostname".
#define UseIP

// This is the IP address of your octoprint server , in the example 192.168.3.68 is configured, adapt for your printer
// Make sure, your printer ALWAYS get the same IP address, this is normally configurable in your router (if not the case by default).
#define ip1 192
#define ip2 168
#define ip3 3
#define ip4 68

#define octoprint_httpPort 80 //If you are connecting through a router this will work, but you need a random port forwarded to the
							  //OctoPrint server from your router. Enter that port here if you are external

// This is the hostname of your octoprint server , in the example 'octopi' is configured, Only applicable when UseIP is NOT defined!
#define octoprintHost "octopi"

//=======================================================================================================
// This section is NEW since version 3.x
//
// An MQTT server can be defined, as well as topics to use. This allows remote controling the plug from your 
// telephone or a home automation.
//
// You can see the state of OctoPlugout in topic configured under <topic_OctoPlugout>
// Switch the plug by publishing a string to topic <topic_OnOffSwitch>
// 	 ON: switches the plug on, switching shutting down the Pi / it off after a printjob.
//	 PERMON: switches the plug on, not looking into OctoPrint for when to switch it off.
//	 OFF: switches the plug off/shuts down the Pi, provided no printjob is running / the extruder is cooled down.
//
//  Other than that, it will publish print and printjob data to 5 topics listed below. 
//  This functionality is ONLY active once you set the mqtt_server #define.
//  The mqtt server can be local or remote. 

// MQTT server to use
//#define mqtt_server "192.168.1.110"	// The IP address or name of your MQTT server
#define mqtt_server "mqtt.server.com"	// The IP address or name of your MQTT server
#define mqtt_port 1883					// The port for accessing your MQTT server
#define mqtt_user "mqttNAME"			// The user for accessinq your mqtt server"		
#define mqtt_pass "mqttPASS"			// The password for accessing your MQTT server

// Topics used=============================================================================================
// For Octoplugout
#define topic_OctoPlugout 			"test/prusa/octoplugout"	// (READ) Status messages and debug info (when enabled)		
#define topic_OnOffSwitch			"test/prusa/switch"			// (WRITE) PowerSwitch for remote controlling of the plug
// From octoprint: printer
#define mqtt_UpdateInterval 		60000    					// Interval (ms) for updating status messages
#define topic_PrintState 			"test/prusa/printstate"		// (READ) Status of the printer
#define topic_ExtruderTemp			"test/prusa/extrudertemp"	// (READ) extruder temperature
#define topic_BedTemp				"test/prusa/bedtemp"		// (READ) bed temperature
// From octoprint: job
#define topic_JobState 				"test/prusa/jobstate"		// (READ) Status of the job	
#define topic_JobProgress			"test/prusa/jobprogress"	// (READ) Job progress (%)
//=========================================================================================================



//=========================================================================================================
//Set these to your own taste.

// This is the hostname of your plug
// If the define is not set, no OTA password is required.
// Note that your platformio OTA upload (or arduino IDE OTA upgrade), must specify (or type in when prompted
// the same password the NEXT time you upload an image.
//
//Set the password, for future Over The Air (WiFi) updates here.
#define OTApass "1234"

// A hostname helps identifying the plug, not all operation systems will see it configured in this manner, 
// it might need the "bonjour" service installed.
#define hostname "OctoPlugout"

// Set this debug_ define to write information to the serial port, will NOT be visible over Wifi, only to the serial port
//#define debug_

//=========================================================================================================
//These depend on your type of Sonoff, see e.g. guides on flashing "Tasmota" for information
//define the used pins for your  Sonoff, below are the ones that apply to a S20/S26
//
// From what I can see, they also apply for 
//   Generic Sonoff,
//   Sonoff 4CH
//   
//
// 
#define PinButton 0
#define PinRelay 12
#define PinLED 13

// In case LEDS or RELAYS are on instead of off and vice versa use these defines to fix:
//#define INVERT_RELAY
//#define INVERT_LED

/* Initial state, use:
  Relay_off                   the plug starts "unpowered" when plugged in.
  Switched_ON                 the plug starts powered, but is NOT listening to Octoprint.
  Waiting_for_print_activity  the plug starts powered, AND is listening to Octoprint.
*/
//==================================================================== Set initial state after plugging in =
#define InitialState Waiting_for_print_activity

//==================================================================== Timing stuff (all in ms) ============
// Set to 60000: In case the WiFi is down, it attempts to restart the WiFi subsystem of the plug every minute
#define CheckWifiState 60000

// Set to 10: Debouncing buttons takes 10ms
#define debounce_interval 10

//Set to 600: If you press the button longer than 600ms, it is interpreted as a "long press"
#define long_press_time 600

//Set to  5000: this means when Octoprint is running, the job state is checked every 5s.
#define OctoprintInterval_running 5000

//Set to 15000: this means when Octoprint is NOT running, the job state is checked every 15s.
#define OctoprintInterval_NOT_running 15000

//Set to 30000: when a job is finished, power off is executed 30 seconds AFTER shutdown of the Pi.
#define WaitPeriodForShutdown 30000

//Set to 50.0: The raspberry is shutdown when the extruder temp is below this value:
#define MaxExtruderTemperature 50.0

//Set to 300000: Determines a printjob should be active at least 5 minutes, before triggering shutdown: shorter => NO SHUTDOWN
#define MinJobTime 300000

//Set to 175: Determines a extruder should reach at least 175°C, before triggering shutdown: colder => NO SHUTDOWN
#define MinExtruderTemperature 175.0

// The states are as follows (see also the state diagram)

//------------------------------------------------------------------------------
// State ident    State
//------------------------------------------------------------------------------
//           0    Relay off
//           1    Relay on
//           2    Relay on, watching the printer job
//           3    Relay on, watching the printer job connected to Octoprint
//           4    Relay on, printjob is busy
//           5    Relay on, print done, extruder HOT
//           6    Relay on, print done, executing shutdown of the Pi
//           7    Relay on, print done, Pi shutdown: waiting for power off
//           8    Relay on, going down, a controled power_off is requested
//           9    Relay on, print started, wait until extruder gets HOT after reasonable time

//======================================================================Set Info LED stuff...  =============
#define LED_blink_initial true
#define LED_blink_flash true

// This defines the indication LED (its "on" time), to indicate a certain state.
// Use 0 to avoid the LED coming on in this state.

// UPDATE the values, but keep as many values as defined.
// 0 = Relay_Off, 1 = Switched_On, 2 = waiting_for_print_activity etc.
// You define how many ms the LED is ON, and how many ms it is OFF. 
//
//            State ident:     0    1    2     3    4    5     6    7    8    9                        
const int LED_ON_TIME[]  = {   0,   0,  50, 3000, 400,  20,   20,  20, 500,1000};
const int LED_OFF_TIME[] = {   0,   0,3000, 3000,3000,1000,  500, 150,3000,3000};

//======================================================================Define messages on printer  =============
// Message_startup is formatted providing major and minor version as parameters
#define Message_startup "M117 OP: OctoPlugout %i.%i"

// Message for announcing that OctoPlugout has detected a started printjob
#define Message_announce_print "M117 OP: PRINT started"

// Message for announcing that OctoPlugout is set sharp: it will poweroff after the print
#define Message_announce_power_off "M117 Poweroff after PRINT"

// message_temperature is formattted providing the temperature for shutting down you provided
#define message_temperature "M117 Shutdown at T=%4.1f C"

//message_poweroff is formatted providing the period to wait after shutdown before powering off
#define message_poweroff "M117 OP: Poweroff in %ds"

// Message indicating that the plug is on, but no longer monitoring
#define message_NoMonitor "M117 OP: NOT monitoring"
